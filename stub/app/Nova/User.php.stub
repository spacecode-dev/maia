<?php

namespace App\Nova;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Laravel\Nova\Fields\Avatar;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\KeyValue;
use Laravel\Nova\Fields\Password;
use Laravel\Nova\Fields\Text;
use SpaceCode\Maia\Fields\PermissionBooleanGroup;
use SpaceCode\Maia\Fields\RoleBooleanGroup;
use SpaceCode\Maia\Fields\Tabs;
use SpaceCode\Maia\Fields\TabsOnEdit;

class User extends Resource
{
    use TabsOnEdit;

    protected $casts = [
        'fullName' => 'array',
        'apps' => 'array'
    ];

    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = 'App\\User';

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'name';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id', 'name', 'email',
    ];

    /**
     * @param Request $request
     * @return array
     * @throws \Exception
     */
    public function fields(Request $request)
    {
        return [
            (new Tabs($this->singularLabel(), [
                trans('maia::resources.general') => [
                    // ID
                    ID::make()->sortable(),

                    // Avatar
                    Avatar::make(trans('maia::resources.avatar'), 'avatar')
                        ->disk(config('maia.filemanager.disk'))
                        ->path('avatars')
                        ->deletable(false)
                        ->prunable(),

                    // Name
                    Text::make(trans('maia::resources.name'), 'name')
                        ->sortable()
                        ->rules('required', 'max:255'),

                    // Email
                    Text::make(trans('maia::resources.email'), 'email')
                        ->sortable()
                        ->rules('required', 'email', 'max:254')
                        ->creationRules('unique:users,email')
                        ->updateRules('unique:users,email,{{resourceId}}'),

                    // Password
                    Password::make(trans('maia::resources.password'), 'password')
                        ->onlyOnForms()
                        ->creationRules('required', 'string', 'min:8')
                        ->updateRules('nullable', 'string', 'min:8'),
                ],
                trans('maia::resources.roles') => [
                    RoleBooleanGroup::make(trans('maia::resources.roles'))
                ],
                trans('maia::resources.permissions') => [
                    PermissionBooleanGroup::make(trans('maia::resources.permissions'))
                ],
                trans('maia::resources.full_name') => [
                    // First
                    Text::make(trans('maia::resources.first_name'), 'fullName->firstName')->resolveUsing(function () {
                        return is_null(jsonProp($this->fullName, 'firstName')) ? null : json_decode($this->fullName)->firstName;
                    })->displayUsing(function () {
                        return is_null(jsonProp($this->fullName, 'firstName')) ? null : json_decode($this->fullName)->firstName;
                    })->hideFromIndex(),

                    // Last
                    Text::make(trans('maia::resources.last_name'), 'fullName->lastName')->resolveUsing(function () {
                        return is_null(jsonProp($this->fullName, 'lastName')) ? null : json_decode($this->fullName)->lastName;
                    })->displayUsing(function () {
                        return is_null(jsonProp($this->fullName, 'lastName')) ? null : json_decode($this->fullName)->lastName;
                    })->hideFromIndex(),

                    // Middle
                    Text::make(trans('maia::resources.middle_name'), 'fullName->middleName')->resolveUsing(function () {
                        return is_null(jsonProp($this->fullName, 'middleName')) ? null : json_decode($this->fullName)->middleName;
                    })->displayUsing(function () {
                        return is_null(jsonProp($this->fullName, 'middleName')) ? null : json_decode($this->fullName)->middleName;
                    })->hideFromIndex()
                ],
                trans('maia::resources.applications') => [
                    KeyValue::make(trans('maia::resources.socialnetworks'), 'apps->socials')
                        ->keyLabel(trans('maia::resources.key'))
                        ->valueLabel(trans('maia::resources.value'))
                        ->actionText(trans('maia::resources.add'))
                        ->resolveUsing(function () {
                            return is_null(jsonProp($this->apps, 'socials')) ? null : json_decode($this->apps)->socials;
                        }),
                    KeyValue::make(trans('maia::resources.webhooks'), 'apps->webhooks')
                        ->keyLabel(trans('maia::resources.key'))
                        ->valueLabel(trans('maia::resources.value'))
                        ->actionText(trans('maia::resources.add'))
                        ->resolveUsing(function () {
                            return is_null(jsonProp($this->apps, 'webhooks')) ? null : json_decode($this->apps)->webhooks;
                        })
                ]
            ]))->withToolbar()
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [];
    }
}
