<?php

namespace App;

use Illuminate\Database\Eloquent\Relations\MorphToMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use SpaceCode\Maia\Traits\HasRoles;

class User extends Authenticatable
{
    use Notifiable, HasRoles;

    /**
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * @return MorphToMany
     */
    public function roles(): MorphToMany
    {
        return $this->morphToMany(
            \SpaceCode\Maia\Models\Role::class,
            'model',
            'model_has_roles',
            'model_id',
            'role_id'
        );
    }

    /**
     * @return MorphToMany
     */
    public function permissions(): MorphToMany
    {
        return $this->morphToMany(
            \SpaceCode\Maia\Models\Permission::class,
            'model',
            'model_has_permissions',
            'model_id',
            'permission_id'
        );
    }

    public function getFlexibleContentAttribute()
    {
        return $this->flexible('apps');
    }

    public function routeNotificationForSlack($notification)
    {
        $url = '';
        if(!is_null($this->apps)) {
            $collection = collect(json_decode($this->apps));
            $item = $collection->firstWhere('attributes.name', 'slack_webhook');
            if(isset($item)) {
                $url = $item->attributes->url;
            }
        }
        return $url;
    }
}
